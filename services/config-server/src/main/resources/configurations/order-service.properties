server.port=8070
spring.datasource.url=jdbc:postgresql://localhost:5432/orders
spring.datasource.username=shweta
spring.datasource.password=shweta
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#URL to connect to customer service
application.config.customer-url=http://localhost:8222/api/v1/customers
application.config.product-url=http://localhost:8222/api/v1/products
application.config.payment-url=http://localhost:8222/api/v1/payments

#kafka url:
spring.kafka.producer.bootstrap-servers=localhost:9092
#As kafka accepts and sends messages in byte from with key-value pair, add serializers :
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#Kafka does not have default serialization for json to not restrict user to use only one serializer, we can use
#one provided by spring framework, or add our own custom serializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#Producer needs to inform consumer about the object type being sent as a topic:(object sent as orderConfirmation)
#This is a security measure from kafka that when we produce or consume something, we need to inform the two sides:
#So, producer is telling consumer that our topic is from this package and it's safe to consume it
spring.kafka.producer.properties.spring.json.type.mapping=orderConfirmation:com.app.kafka.OrderConfirmation
